incarnation: protelis

variables:
  # max distance for considering two nodes as neighbours
  linkingDistance: &linkingDistance
    min: 0.1
    max: 0.9
    step: 0.1
    default: 0.3
  channelWidth: &channelWidth
    min: 0.2
    max: 1
    step: 0.1
    default: 0.5

seeds:
  scenario: 0
  simulation: 1

environment:
  # Bi-dimensional euclidean space
  type: Continuous2DEnvironment

network-model:
  # nodes are considered as neighbours on a per-distance basis
  type: ConnectWithinDistance
  parameters:
    # the threshold
    - *linkingDistance

reactions:
  move: &move
    - time-distribution:
        type: ExponentialTime
        parameters: [1]
      type: Event
      actions:
        - type: BrownianMove
          parameters: [0.01]
  channel: &channel
    - time-distribution: 2
#        type: DiracComb
#        parameters: [1]
      program: |
        module example:channel

        import protelis:coord:spreading
        channel2(env.has("source"), env.has("destination"), env.get("width"))
    - program: send

displacements:
  - in:
      type: Grid
      parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]
    contents:
      - in:
          type: Rectangle
          parameters: [-6, -6, 2, 2]
        molecule: source
        concentration: true
      - in:
          type: Rectangle
          parameters: [4, 4, 6, 6]
        molecule: destination
        concentration: true
      - molecule: width
        concentration: *channelWidth
    programs:
      - *channel
#      - *move

export:
  - time
  - number-of-nodes
  - molecule: source
    aggregators: [sum]
  - molecule: destination
    aggregators: [sum]
  - molecule: example:channel
    aggregators: [sum]